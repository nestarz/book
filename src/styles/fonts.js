import { css } from "styled-components";

import Tesserae from "./fonts/Tesserae-Regular.ttf";

export const LocalFonts = css`
@font-face {
  font-family: Tesserae;
  src: url(${Tesserae}) format('truetype');
}
`

export const TesseraeUnicodes = [57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57506,57507,57508,57511,57512,57513,57514,57519,57520,57521,57522,57523,57524,57525,57526,57529,57530,57531,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,57626,57627,57628,57629,57630,57631,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57920,57921,57922,57923,57924,57925,57926,57927,57928,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58938,59136,59137,59138,59139,59140,59520,59648,62720,62721,62722,62723,62724,62725,62726,62727,62728,62729,62730,62731,62732,62733,62734,62735,62736,62737,62738,62739,62740,62741,62742,62743,62744,62745,62746,62747,62748,62749,62750,62751,62752,62753,62754,62755,62756,62757,62758,62759,62760,62761,62762,62763,62764,62765,62766,62767,62768,62769,62770,62771,62772,62773,62774,62775,62776,62777,62778,62779,62780,62781,62782,62783,62784,62785,62786,62787,62788,62789,62790,62791,62792,62793,62794,62795,62796,62797,62798,62799,62800,62801,62802,62803,62804,62805,62806,62807,62808,62809,62810,62811,62812,62813,62814,62815,62816,62817,62818,62819,62820,62821,62822,62823,62824,62825,62826,62827,62828,62829,62830,62831,62832,62833,62834,62835,62836,62837,62838,62839,62840,62841,62842,62843,62844,62845,62846,62847];

const selectChar = (sourceChar, sourceCharSet) => sourceCharSet.indexOf(sourceChar) == -1 ? sourceChar : String.fromCharCode(TesseraeUnicodes[Math.floor(TesseraeUnicodes.length * sourceCharSet.indexOf(sourceChar) / sourceCharSet.length)]);
export const convertToTesserae = (string, sourceCharSet) => {
  string = !!string ? string.toString() : "null";
  let result = '';
  for (var i = 0; i < string.length; i++) {
    result += selectChar(string[i], sourceCharSet);
  }
  return result;
}

export const randomTesseraeString = (stringLength = 1) => {
  var res = '';
  for (let i = 0; i < stringLength; i++) {
    res = res + String.fromCharCode(TesseraeUnicodes[Math.floor(TesseraeUnicodes.length * Math.random())]);
  }
  return res;
}

//const selectChar = (sourceChar, sourceCharSet) => String.fromCharCode(TesseraeUnicodes[Math.floor(TesseraeUnicodes.length * sourceUnicodeSet.index(sourceUnicodeChar) / sourceUnicodeSet.length)]);
